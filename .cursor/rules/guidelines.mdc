---
alwaysApply: true
---

## üìù Coding Standards

### TypeScript Standards
- **Strict Mode**: Enable `"strict": true` configuration
- **Syntax Version**: Prioritize ES2017+ syntax features
- **Component Definition**: Use arrow functions or `export default function`
- **Type Import**: Use `import type { }` syntax

### React Component Standards

#### Standard Component Structure
```typescript
'use client' // Client components must be marked

import { ComponentProps } from 'react'
import { cn } from '@/lib/utils'

interface ComponentNameProps {
  className?: string
  children?: React.ReactNode
}

export default function ComponentName({
  className,
  children,
  ...props
}: ComponentNameProps) {
  return (
    <div className={cn("default-classes", className)}>
      {children}
    </div>
  )
}
```

#### Import Order Standards
```typescript
// 1. React related
import React from 'react'
import { useState, useEffect } from 'react'

// 2. Next.js related
import Link from 'next/link'
import Image from 'next/image'

// 3. Third-party libraries
import { motion } from 'motion'
import { ChevronDownIcon } from 'lucide-react'

// 4. Internal components and utilities
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

// 5. Type definitions
import type { ComponentProps } from 'react'
```

### Tailwind CSS Standards

#### Style Writing Conventions
```typescript
// ‚úÖ Recommended style writing
className={cn(
  "base-classes",
  "responsive sm:class md:class lg:class",
  "dark:class dark:hover:class",
  conditionalClass && "conditional-class",
  className // Allow external override
)}
```

#### Responsive Design
- **Breakpoints**: `sm:` (640px) `md:` (768px) `lg:` (1024px) `xl:` (1280px)
- **Dark Mode**: Use `dark:` prefix
- **Theme Colors**: Use semantic colors `primary` `secondary` `muted-foreground`

### File Naming Standards
- **Component Files**: `kebab-case.tsx` (e.g., `app-header.tsx`)
- **Data Files**: `kebab-case.json` or `.tsx`
- **Utility Functions**: `camelCase.ts`
- **Page Files**: Follow Next.js App Router conventions

### Git Commit Standards
- **Commit Standard**: Must use [Conventional Commits](https://www.conventionalcommits.org/) specification
- **Language Requirement**: Commit messages must be written in English
- **Format Requirement**: `<type>[optional scope]: <description>`
- **Type Description**:
  - `feat`: New features
  - `fix`: Bug fixes
  - `docs`: Documentation updates
  - `style`: Code format adjustments (no functional impact)
  - `refactor`: Code refactoring
  - `perf`: Performance optimizations
  - `test`: Testing related
  - `chore`: Build process or auxiliary tool changes
- **Examples**:
  ```bash
  feat: add user login functionality
  fix(auth): resolve login validation failure issue
  docs: update API documentation
  refactor(components): restructure button component
  ```

---

## üé® Content and Brand Standards

### Language and Terminology
- **Interface Language**: All user interface text uses Chinese
- **Brand Name**: Consistently use "RustFS" (first letter capitalized)
- **Documentation Links**: Consistently point to `https://docs.rustfs.com`
- **Brand Image**: Maintain professional image of distributed storage system

### üåç Internationalization Development Standards

#### Namespace + English Original as Key Structure
```typescript
// ‚úÖ Recommended internationalization approach
const t = useTranslations('nav');  // Specify namespace
t('Features')                      // Use English original as Key
t('Architecture')
t('Get Started')

// ‚ùå Avoid this approach
const t = useTranslations();
t('nav.Features')                 // No need for namespace prefix
t('nav.Architecture')
t('nav.Get Started')
```

#### Localization File Organization Principles
- **English Version**: key = English original, display English directly
- **Chinese Version**: key = English original, value = Chinese translation
- **Namespace**: Organize by functional modules (`nav`, `buttons`, `hero`, `download`)
- **Key Format**: Use English original as Key, maintain readability and intuitiveness

#### Namespace Organization Suggestions
```typescript
// Organize by functional modules, each component uses corresponding namespace
const navT = useTranslations('nav');
navT('Features')                  // Navigation features
navT('Architecture')              // Navigation architecture

const btnT = useTranslations('buttons');
btnT('Get Started')               // Button get started

const heroT = useTranslations('hero');
heroT('High Performance')         // Hero section high performance

const downloadT = useTranslations('download');
downloadT('Choose Platform')      // Download choose platform
```

#### Internationalization Development Advantages
- **More Intuitive Code**: English original as Key, clear at a glance
- **Easier Maintenance**: Developers can directly see the text content to be displayed
- **Clearer Architecture**: Namespace organized by functional modules
- **More Efficient Development**: Reduce memory burden, improve development efficiency
- **Better Compatibility**: Support limitations of internationalization frameworks like next-intl
- **More Accurate Translation**: English original as Key ensures translation accuracy
- **Type Safety**: Specifying namespace provides better type inference

#### Localization File Examples
```json
// locales/en.json
{
  "nav": {
    "Features": "Features",
    "Architecture": "Architecture",
    "Solutions": "Solutions"
  },
  "buttons": {
    "Get Started": "Get Started",
    "Download": "Download",
    "View Demo": "View Demo"
  }
}

// locales/zh.json
{
  "nav": {
    "Features": "ÂäüËÉΩ",
    "Architecture": "Êû∂ÊûÑ",
    "Solutions": "ÊñπÊ°à"
  },
  "buttons": {
    "Get Started": "ÂºÄÂßã‰ΩøÁî®",
    "Download": "‰∏ãËΩΩ",
    "View Demo": "Êü•ÁúãÊºîÁ§∫"
  }
}
```

### Performance Optimization Requirements
- **Image Optimization**: Use Next.js `Image` component
- **Server-Side Rendering**: Prioritize SSR, minimize client components
- **Lazy Loading**: Implement lazy loading for large components and data
- **Re-render Optimization**: Avoid unnecessary component re-renders

---

## ‚ö†Ô∏è Prohibited Items

### üö® Absolutely Forbidden - Style and Structure Protection

**Under no circumstances, unless explicitly specified, is it absolutely not allowed to modify styles and structures!**

#### Strictly Forbidden Style Changes
- ‚ùå Modify existing CSS class names
- ‚ùå Change layout structure (grid, flex, position, etc.)
- ‚ùå Modify colors, fonts, spacing, and other visual properties
- ‚ùå Change responsive breakpoints or media queries
- ‚ùå Modify dark mode styles

#### Strictly Forbidden Structure Changes
- ‚ùå Simplify complex component designs
- ‚ùå Remove visual elements or decorations
- ‚ùå Replace custom components with basic UI components
- ‚ùå Change component nesting levels
- ‚ùå Remove animations, transition effects
- ‚ùå Change hover, click, and other interaction behaviors

#### Strictly Forbidden Functional Changes
- ‚ùå Remove existing functionality
- ‚ùå Simplify complex business logic
- ‚ùå Change data flow or state management
- ‚ùå Remove error handling or edge cases

### Strictly Forbidden
- ‚ùå Modify `components.json` shadcn/ui configuration file
- ‚ùå Hardcode data in components, must use `data/` directory
- ‚ùå Destroy existing dark mode support
- ‚ùå Use inline styles, uniformly use Tailwind CSS
- ‚ùå Ignore TypeScript type errors
- ‚ùå Modify existing API interfaces and configuration structures
- ‚ùå Use ID format internationalization key names, such as `t('features')`
- ‚ùå Mix different namespace translation keys in components
- ‚ùå Hardcode Chinese/English text, must use internationalization system
- ‚ùå Use spaces, periods, and other special characters in translation keys
- ‚ùå Use `useTranslations()` without specifying namespace
- ‚ùå Use commit messages that don't conform to Conventional Commits specification
- ‚ùå Use Chinese or other non-English languages to write Git commit messages

### Development Notes
- ‚ùå Don't make "convenient" additional modifications
- ‚ùå Don't add unnecessary logs or comments
- ‚ùå Don't create abstraction layers outside the task scope
- ‚ùå **Don't modify existing code unless you clearly know what needs to be modified**
- ‚úÖ **Only modify existing code when you clearly know what needs to be changed and have confidence**

---

## üìã Quality Checklist

### Pre-Code Change Checks
1. ‚úÖ **Task Understanding**: Clearly understand task objectives and scope
2. ‚úÖ **Plan Development**: Develop clear modification plan
3. ‚úÖ **Technical Standards**: Code conforms to project technical standards
4. ‚úÖ **Coding Style**: Follow component and style conventions
5. ‚úÖ **Function Protection**: Won't destroy existing functionality
6. ‚úÖ **Type Safety**: Pass TypeScript type checking
7. ‚úÖ **Responsive Compatibility**: Responsive layout and dark mode compatibility
8. ‚úÖ **Content Correctness**: Chinese content displays correctly
9. ‚úÖ **Modification Necessity**: Clearly know what needs to be modified and have confidence
10. ‚úÖ **Internationalization Standards**: Use namespace + English original as Key structure
11. ‚úÖ **Translation Completeness**: Chinese and English translation keys completely correspond
12. ‚úÖ **Namespace Consistency**: Same component uses unified namespace
13. ‚úÖ **Key Format Correctness**: Use English original as Key, maintain readability
14. ‚úÖ **Style Protection**: Haven't modified any existing CSS class names
15. ‚úÖ **Structure Protection**: Haven't changed any layout structure or component design
16. ‚úÖ **Interaction Protection**: Haven't removed or modified any animations, transitions, or interaction behaviors
17. ‚úÖ **Function Protection**: Haven't simplified or removed any existing functionality
18. ‚úÖ **Internationalization Calls**: Use `useTranslations('namespace')` to specify namespace

### Pre-Submission Verification
- ‚úÖ All modified files are listed
- ‚úÖ Dark mode functionality is normal
- ‚úÖ Responsive layout has no abnormalities
- ‚úÖ Chinese content displays correctly
- ‚úÖ No TypeScript errors
- ‚úÖ No console warnings
- ‚úÖ Commit messages conform to Conventional Commits specification
- ‚úÖ Commit messages are written in English

---

## üéØ Core Requirements

**Precise, Efficient, No Complexity Introduction, Absolute Protection of Styles and Structures** - This is our development guideline.

Every code change should:
- üéØ **Precise**: Only modify code required by the task
- ‚ö° **Efficient**: Avoid unnecessary complexity
- üõ°Ô∏è **Safe**: Ensure system stability and code quality
- üîí **Cautious**: Only modify when clearly knowing what needs to be changed and having confidence
- üö® **Style Protection**: Absolutely not allowed to modify any existing styles and structures
- üé® **Design Protection**: Maintain all existing beautiful designs and complex functionality

---
