# RustFS.com 项目开发规范

## 📋 项目概述

RustFS.com 是一个基于 Next.js 的现代化分布式存储系统官网，采用 TypeScript + Tailwind CSS 技术栈，支持深色模式和响应式设计。

## 🎯 核心开发原则

### 五大执行步骤

#### 1. 任务分析与规划
- **明确目标**：在开始编码前，深入理解任务需求和预期结果
- **制定计划**：列出需要修改的具体文件、组件和函数，说明修改原因
- **风险评估**：评估改动对现有功能的影响，制定回滚方案

#### 2. 精准代码定位
- **文件识别**：确定需要修改的具体文件和代码行号
- **影响分析**：避免无关文件的改动，明确每个文件的修改理由
- **最小化原则**：除非任务明确要求，否则不创建新的抽象层或重构现有代码

#### 3. 最小化代码改动
- **专注核心**：只编写任务直接所需的代码
- **避免冗余**：不添加不必要的日志、注释、测试或错误处理
- **隔离性**：确保新代码不会干扰现有功能，保持代码的独立性

#### 4. 严格代码审查
- **正确性检查**：验证代码逻辑的正确性和完整性
- **风格一致性**：确保代码符合项目既定的编码风格
- **副作用评估**：评估改动对下游系统的影响

#### 5. 清晰交付文档
- **变更总结**：详细说明所有修改的内容和原因
- **文件清单**：列出所有修改的文件及其具体变更
- **风险说明**：标注任何假设或潜在风险点

### 核心原则
- **🎯 精准执行**：严格按照任务要求执行，不随意创新
- **⚡ 高效开发**：避免过度设计，只做必要的工作
- **🛡️ 安全可靠**：始终遵循开发流程，确保代码质量和系统稳定性
- **🔒 谨慎修改**：明确知道需要修改才改，没把握就不要动已有的代码

---

## 🛠️ 技术栈规范

### 核心技术
- **框架**: Next.js 15.3.4 (App Router)
- **语言**: TypeScript (ES2017+, 严格模式)
- **样式**: Tailwind CSS 4 + shadcn/ui
- **图标**: Lucide React
- **主题**: next-themes (深色模式支持)
- **动画**: motion + tw-animate-css
- **国际化**: 中文为主 (lang="zh-CN")

### 项目目录结构
```
rustfs.com/
├── app/                    # Next.js App Router 目录
│   ├── components/         # 页面级组件
│   │   ├── buttons/       # 按钮组件集合
│   │   └── *.tsx         # 功能组件
│   ├── download/          # 下载页面
│   ├── layout.tsx         # 根布局
│   ├── page.tsx          # 首页
│   └── globals.css       # 全局样式
├── components/            # 通用组件库
│   ├── ui/               # shadcn/ui 组件
│   └── magicui/         # 自定义 UI 组件
├── data/                 # 静态数据
│   ├── reviews.json      # 用户评价
│   └── *.json           # 其他配置数据
├── lib/                  # 工具函数
│   └── utils.ts         # Tailwind merge 等工具
└── public/              # 静态资源
    ├── images/          # 图片资源
    └── svgs/           # SVG 图标
```

---

## 📝 编码规范

### TypeScript 规范
- **严格模式**: 启用 `"strict": true` 配置
- **语法版本**: 优先使用 ES2017+ 语法特性
- **组件定义**: 使用箭头函数或 `export default function`
- **类型导入**: 使用 `import type { }` 语法

### React 组件规范

#### 标准组件结构
```typescript
'use client' // 客户端组件必须标注

import { ComponentProps } from 'react'
import { cn } from '@/lib/utils'

interface ComponentNameProps {
  className?: string
  children?: React.ReactNode
}

export default function ComponentName({
  className,
  children,
  ...props
}: ComponentNameProps) {
  return (
    <div className={cn("default-classes", className)}>
      {children}
    </div>
  )
}
```

#### 导入顺序规范
```typescript
// 1. React 相关
import React from 'react'
import { useState, useEffect } from 'react'

// 2. Next.js 相关
import Link from 'next/link'
import Image from 'next/image'

// 3. 第三方库
import { motion } from 'motion'
import { ChevronDownIcon } from 'lucide-react'

// 4. 内部组件和工具
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

// 5. 类型定义
import type { ComponentProps } from 'react'
```

### Tailwind CSS 规范

#### 样式编写约定
```typescript
// ✅ 推荐的样式写法
className={cn(
  "base-classes",
  "responsive sm:class md:class lg:class",
  "dark:class dark:hover:class",
  conditionalClass && "conditional-class",
  className // 允许外部覆盖
)}
```

#### 响应式设计
- **断点**: `sm:` (640px) `md:` (768px) `lg:` (1024px) `xl:` (1280px)
- **深色模式**: 使用 `dark:` 前缀
- **主题色彩**: 使用语义化颜色 `primary` `secondary` `muted-foreground`

### 文件命名规范
- **组件文件**: `kebab-case.tsx` (如 `app-header.tsx`)
- **数据文件**: `kebab-case.json` 或 `.tsx`
- **工具函数**: `camelCase.ts`
- **页面文件**: 遵循 Next.js App Router 约定

### Git 提交规范
- **提交标准**: 必须使用 [Conventional Commits](https://www.conventionalcommits.org/) 规范
- **语言要求**: 提交信息必须使用英文
- **格式要求**: `<type>[optional scope]: <description>`
- **类型说明**:
  - `feat`: 新功能
  - `fix`: 修复 bug
  - `docs`: 文档更新
  - `style`: 代码格式调整（不影响功能）
  - `refactor`: 代码重构
  - `perf`: 性能优化
  - `test`: 测试相关
  - `chore`: 构建过程或辅助工具的变动
- **示例**:
  ```bash
  feat: add user login functionality
  fix(auth): resolve login validation failure issue
  docs: update API documentation
  refactor(components): restructure button component
  ```

---

## 🎨 内容与品牌规范

### 语言与术语
- **界面语言**: 所有用户界面文本使用中文
- **品牌名称**: 统一使用 "RustFS" (首字母大写)
- **文档链接**: 统一指向 `https://docs.rustfs.com`
- **品牌形象**: 保持分布式存储系统的专业形象

### 🌍 国际化开发规范

#### 指定命名空间 + 英文原文作为 Key 的国际化结构
```typescript
// ✅ 推荐的国际化写法
const t = useTranslations('nav');  // 指定命名空间
t('Features')                      // 英文原文作为 Key
t('Architecture')
t('Get Started')

// ❌ 避免的写法
const t = useTranslations();
t('nav.Features')                 // 不需要命名空间前缀
t('nav.Architecture')
t('nav.Get Started')
```

#### 本地化文件组织原则
- **英文版本**: key = 英文原文，直接显示英文
- **中文版本**: key = 英文原文，value = 中文翻译
- **命名空间**: 按功能模块组织 (`nav`, `buttons`, `hero`, `download`)
- **Key 格式**: 使用英文原文作为 Key，保持可读性和直观性

#### 命名空间组织建议
```typescript
// 按功能模块组织，每个组件使用对应的命名空间
const navT = useTranslations('nav');
navT('Features')                  // 导航功能
navT('Architecture')              // 导航架构

const btnT = useTranslations('buttons');
btnT('Get Started')               // 按钮开始使用

const heroT = useTranslations('hero');
heroT('High Performance')         // 英雄区高性能

const downloadT = useTranslations('download');
downloadT('Choose Platform')      // 下载选择平台
```

#### 国际化开发优势
- **代码更直观**: 英文原文作为 Key，一目了然
- **维护更简单**: 开发者可以直接看到要显示的文本内容
- **架构更清晰**: 命名空间按功能模块组织
- **开发更高效**: 减少记忆负担，提升开发效率
- **兼容性更好**: 支持 next-intl 等国际化框架的限制
- **翻译更准确**: 英文原文作为 Key 确保翻译的准确性
- **类型安全**: 指定命名空间提供更好的类型推断

#### 本地化文件示例
```json
// locales/en.json
{
  "nav": {
    "Features": "Features",
    "Architecture": "Architecture",
    "Solutions": "Solutions"
  },
  "buttons": {
    "Get Started": "Get Started",
    "Download": "Download",
    "View Demo": "View Demo"
  }
}

// locales/zh.json
{
  "nav": {
    "Features": "功能",
    "Architecture": "架构",
    "Solutions": "方案"
  },
  "buttons": {
    "Get Started": "开始使用",
    "Download": "下载",
    "View Demo": "查看演示"
  }
}
```

### 性能优化要求
- **图片优化**: 使用 Next.js `Image` 组件
- **服务端渲染**: 优先使用 SSR，最小化客户端组件
- **懒加载**: 对大型组件和数据实施懒加载
- **重渲染优化**: 避免不必要的组件重渲染

---

## ⚠️ 禁止事项

### 🚨 绝对禁止 - 样式和结构保护

**在任何情况下，除非明确指定，否则绝对不允许改动样式和结构！**

#### 严格禁止的样式改动
- ❌ 修改现有的 CSS 类名
- ❌ 改变布局结构（grid、flex、position 等）
- ❌ 修改颜色、字体、间距等视觉属性
- ❌ 改变响应式断点或媒体查询
- ❌ 修改深色模式样式

#### 严格禁止的结构改动
- ❌ 简化复杂的组件设计
- ❌ 移除视觉元素或装饰
- ❌ 替换自定义组件为基本 UI 组件
- ❌ 改变组件的嵌套层次
- ❌ 移除动画、过渡效果
- ❌ 改变悬停、点击等交互行为

#### 严格禁止的功能改动
- ❌ 移除现有功能
- ❌ 简化复杂的业务逻辑
- ❌ 改变数据流或状态管理
- ❌ 移除错误处理或边界情况

### 严格禁止
- ❌ 修改 `components.json` shadcn/ui 配置文件
- ❌ 在组件中硬编码数据，必须使用 `data/` 目录
- ❌ 破坏现有的深色模式支持
- ❌ 使用内联样式，统一使用 Tailwind CSS
- ❌ 忽略 TypeScript 类型错误
- ❌ 修改已有的 API 接口和配置结构
- ❌ 使用 ID 格式的国际化键名，如 `t('features')`
- ❌ 在组件中混用不同命名空间的翻译键
- ❌ 硬编码中英文文本，必须使用国际化系统
- ❌ 在翻译键中使用空格、句号等特殊字符
- ❌ 使用 `useTranslations()` 而不指定命名空间
- ❌ 使用不符合 Conventional Commits 规范的提交信息
- ❌ 使用中文或其他非英文语言编写 Git 提交信息

### 开发注意事项
- ❌ 不要进行"顺手"的额外修改
- ❌ 不要添加不必要的日志或注释
- ❌ 不要创建任务范围外的抽象层
- ❌ **不要修改已有代码，除非明确知道需要修改**
- ✅ **只有在明确知道需要修改且有把握的情况下才改动现有代码**

---

## 📋 质量检查清单

### 代码改动前检查
1. ✅ **任务理解**: 已明确理解任务目标和范围
2. ✅ **计划制定**: 已制定清晰的修改计划
3. ✅ **技术规范**: 代码符合项目技术规范
4. ✅ **编码风格**: 遵循组件和样式约定
5. ✅ **功能保护**: 不会破坏现有功能
6. ✅ **类型安全**: 通过 TypeScript 类型检查
7. ✅ **响应式兼容**: 响应式布局和深色模式兼容
8. ✅ **内容正确**: 中文内容显示正确
9. ✅ **修改必要性**: 明确知道需要修改且有把握
10. ✅ **国际化规范**: 使用指定命名空间 + 英文原文作为 Key 的国际化结构
11. ✅ **翻译完整性**: 中英文翻译键完整对应
12. ✅ **命名空间一致**: 同一组件使用统一的命名空间
13. ✅ **Key 格式正确**: 使用英文原文作为 Key，保持可读性
14. ✅ **样式保护**: 没有修改任何现有的 CSS 类名
15. ✅ **结构保护**: 没有改变任何布局结构或组件设计
16. ✅ **交互保护**: 没有移除或修改任何动画、过渡、交互行为
17. ✅ **功能保护**: 没有简化或移除任何现有功能
18. ✅ **国际化调用**: 使用 `useTranslations('namespace')` 指定命名空间

### 提交前验证
- ✅ 所有修改的文件已列出
- ✅ 深色模式功能正常
- ✅ 响应式布局无异常
- ✅ 中文内容显示正确
- ✅ 无 TypeScript 错误
- ✅ 无控制台警告
- ✅ 提交信息符合 Conventional Commits 规范
- ✅ 提交信息使用英文编写

---

## 🎯 核心要求

**精准、高效、不引入复杂性、绝对保护样式和结构** - 这是我们的开发准则。

每次代码改动都应该：
- 🎯 **精准**: 只修改任务要求的代码
- ⚡ **高效**: 避免不必要的复杂化
- 🛡️ **安全**: 确保系统稳定性和代码质量
- 🔒 **谨慎**: 明确知道需要修改才改，没把握就不要动已有的代码
- 🚨 **样式保护**: 绝对不允许改动任何现有的样式和结构
- 🎨 **设计保护**: 保持所有现有的精美设计和复杂功能

---

*最后更新: 2024年12月*
